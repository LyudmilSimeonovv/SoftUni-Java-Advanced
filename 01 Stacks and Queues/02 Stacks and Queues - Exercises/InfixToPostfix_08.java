package com.company.Stekove_Opashki._exersises;import java.util.*;public class InfixToPostfix_08 {    // Operator precedence dictionary    private static final Map<String, Integer> precedence = new HashMap<>();    static {        precedence.put("+", 1);        precedence.put("-", 1);        precedence.put("*", 2);        precedence.put("/", 2);    }    public static String infixToPostfix(String expr) {        Stack<String> stack = new Stack<>();        List<String> output = new ArrayList<>();        String[] tokens = expr.split("\\s+");        for (String token : tokens) {            if (token.matches("\\d+|[a-z]+")) {                // If token is a number or variable, add to output                output.add(token);            } else if (token.equals("(")) {                // If token is a left parenthesis, push onto stack                stack.push(token);            } else if (token.equals(")")) {                // If token is a right parenthesis, pop operators from stack and add to output until                // left parenthesis is encountered                while (!stack.peek().equals("(")) {                    output.add(stack.pop());                }                stack.pop(); // Pop left parenthesis from stack            } else {                // If token is an operator, pop operators from stack and add to output while they have                // higher or equal precedence                while (!stack.isEmpty() && !stack.peek().equals("(") && precedence.get(token) <= precedence.get(stack.peek())) {                    output.add(stack.pop());                }                stack.push(token); // Push current operator onto stack            }        }        // Pop remaining operators from stack and add to output        while (!stack.isEmpty()) {            output.add(stack.pop());        }        // Join output list into a single string with spaces between tokens        return String.join(" ", output);    }    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        String expr = scanner.nextLine();        String postfix = infixToPostfix(expr);        System.out.println(postfix); // Output: 7 13 12 4 - / +    }}