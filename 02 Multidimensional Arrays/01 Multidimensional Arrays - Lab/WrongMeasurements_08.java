package com.company.MATRICI._LAB;import java.util.Arrays;import java.util.Scanner;public class WrongMeasurements_08 {    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        int countRows = Integer.parseInt(scanner.nextLine());        int[][] matrix = readMatrix(scanner, countRows);        // int[][] newMatrix = matrix;        int[] input = Arrays.stream(scanner.nextLine().split("\\s+"))                .mapToInt(Integer::parseInt).toArray();        int rowWorningValue = input[0];        int colWorningValue = input[1];        int worningValue = matrix[rowWorningValue][colWorningValue];        for (int row = 0; row < matrix.length; row++) {            for (int col = 0; col < matrix[row].length; col++) {                int number = matrix[row][col];                int currentNumber = matrix[row][col];                if (currentNumber == worningValue) {                    if (matrix[row].length == 1) {                        if (row > 0 && row < matrix.length - 1) {                            if (matrix[row - 1][col] != worningValue && matrix[row + 1][col] != worningValue) {                                currentNumber += matrix[row - 1][col] + matrix[row + 1][col];                            }                        } else if (row == 0) {                            if (matrix[row + 1][col] != worningValue) {                                currentNumber += matrix[row + 1][col];                            }                        } else if (row == matrix.length - 1) {                            currentNumber += matrix[row - 1][col];                        }                        currentNumber = currentNumber - worningValue;                        System.out.print(currentNumber + " ");                        break;                    }                    if (col > 0 && col < matrix[row].length - 1) {                        if (matrix[row][col - 1] != worningValue && matrix[row][col + 1] != worningValue) {                            currentNumber += matrix[row][col - 1] + matrix[row][col + 1];                        } else if (matrix[row][col - 1] != worningValue) {                            currentNumber += matrix[row][col - 1];                        } else if (matrix[row][col + 1] != worningValue) {                            currentNumber += matrix[row][col + 1];                        }                    } else if (col == 0 && matrix[row][col + 1] != worningValue) {                        currentNumber += matrix[row][col + 1];                    } else if (col == matrix[row].length - 1 && matrix[row][col - 1] != worningValue) {                        currentNumber += matrix[row][col - 1];                    }                    if (row > 0 && row < matrix.length - 1) {                        if (matrix[row - 1][col] != worningValue && matrix[row + 1][col] != worningValue) {                            currentNumber += matrix[row - 1][col] + matrix[row + 1][col];                        }                    } else if (row == 0 && matrix[row + 1][col] != worningValue) {                        currentNumber += matrix[row + 1][col];                    } else if (row == matrix.length - 1 && matrix[row - 1][col] != worningValue) {                        currentNumber += matrix[row - 1][col];                    }                    currentNumber = currentNumber - worningValue;                }                if (number == worningValue) {                    System.out.print(currentNumber + " ");                } else {                    System.out.print(number + " ");                }            }            if (matrix[row].length != 1) {                System.out.println();            }        }        /*Arrays.stream(newMatrix).forEach(e -> {            Arrays.stream(e).forEach(i -> System.out.print(i + " "));            System.out.println();        });*/    }    private static int[][] readMatrix(Scanner scanner, int countRows) {        int[][] matrix = new int[countRows][];        for (int row = 0; row < countRows; row++) {            matrix[row] = Arrays.stream(scanner.nextLine().split("\\s+"))                    .mapToInt(Integer::parseInt).toArray();        }        return matrix;    }}